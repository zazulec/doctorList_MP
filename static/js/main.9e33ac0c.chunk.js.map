{"version":3,"sources":["assets/logo/TP.svg","components/layouts/AppLayout.js","components/table/Table.js","components/layouts/AppOverlay.js","components/customInput/CustomInput.js","components/customTextArea/CustomTextArea.js","components/customButton/CustomButton.js","assets/images/close_24px.svg","components/sideBarRight/SideBarRight.js","actions/mainActions.js","components/mainModal/MainModal.js","App.js","reportWebVitals.js","reducers/mainReducer.js","reducers/appReducer.js","helpers/store.js","index.js"],"names":["AppLayout","children","className","src","tpLogo","alt","style","marginLeft","backgroundColor","height","TableComponent","setToggleSideBarRight","setToggleAppOverlay","setSingleTherapistId","useState","pageIndex","setPageIndex","currentTherapistView","useSelector","state","startIndex","endIndex","main","allTherapists","slice","numberOfPage","Math","floor","length","getSpecializationsView","specializations","dots","map","e","index","i","avatarUrl","fullName","Tooltip","title","disableHoverListener","arrow","placement","onClick","therapistId","Pagination","count","page","onChange","_","variant","shape","AppOverlay","closeModals","id","target","closeAllModals","CustomInput","labelText","data","handleInput","defaultValue","type","value","CustomTextArea","handleTextArea","CustomButton","role","SideBarRight","setToggleMainModal","singleTherapistId","singleTherapist","dispatch","useDispatch","setFullName","aboutMe","setAboutMe","isEdited","setIsEdited","useEffect","fetch","config","allTherapistsData","method","headers","then","res","json","catch","error","console","prevState","closeButton","width","marginTop","therapyTypes","certificates","name","therapistInfo","editedData","saveEditedTherapistInfo","alert","saveTherapistData","MainModal","deleteTherapist","App","toggleAppOverlay","toggleSideBarRight","toggleMainModal","allTherapist","body","JSON","stringify","citySeoName","therapists","display","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initState","mainReducer","action","newState","findTherapistToUpdate","findIndex","newAllTherapists","updatedTherapistData","findTherapistDataToRemove","deleteDataInArrayWhenFindIndexInAllTherapist","splice","newAllItemsData","appReducer","combineReducers","loggerMiddleware","createLogger","middlewares","thunkMiddleware","push","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e33ac0c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TP.86b7a90d.svg\";","import React from \"react\";\nimport \"../../scss/layouts/appLayouts.scss\";\nimport tpLogo from \"../../assets/logo/TP.svg\";\n\nexport default function AppLayout({ children }) {\n  return (\n    <div className=\"appLayout\">\n      <div className=\"appLayout_navBar\">\n        <h5>Lista Specjalistów</h5>\n      </div>\n      <div className=\"appLayout_leftBar\">\n        <img src={tpLogo} alt=\"tpLogo\"></img>\n      </div>\n      <div\n        style={{\n          marginLeft: \"81px\",\n          backgroundColor: \"#E5E5E5\",\n          height: \"100%\",\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n","import React, { useState, Fragment } from \"react\";\nimport \"../../scss/components/table/table.scss\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nimport { useSelector } from \"react-redux\";\n\nexport default function TableComponent({\n  setToggleSideBarRight,\n  setToggleAppOverlay,\n  setSingleTherapistId,\n}) {\n  const [pageIndex, setPageIndex] = useState(0);\n  const currentTherapistView = useSelector((state) => {\n    const startIndex = pageIndex * 10;\n    const endIndex = startIndex + 10;\n    return (\n      state.main.allTherapists &&\n      state.main.allTherapists.slice(startIndex, endIndex)\n    );\n  });\n  const numberOfPage = useSelector((state) =>\n    Math.floor(state.main.allTherapists && state.main.allTherapists.length / 10)\n  );\n\n  const getSpecializationsView = (specializations) => {\n    const isExtended = specializations.length > 3;\n    const dots = isExtended ? <span>...</span> : null;\n    return (\n      <>\n        {specializations.slice(0, 3).map((e, index) => (\n          <Fragment key={index}>\n            <span>{e}</span>\n            {index < 2 ? \", \" : \"\"}\n          </Fragment>\n        ))}\n        {dots}\n      </>\n    );\n  };\n\n  const openSideBarRight = (therapistId) => {\n    setSingleTherapistId(therapistId);\n    setToggleAppOverlay(true);\n    setToggleSideBarRight(true);\n  };\n\n  return (\n    <div className=\"tableComponent\">\n      <div className=\"tableComponent_wrapper\">\n        <div className=\"tableComponent_header\">\n          <div className=\"tableComponent_header--specialist\">\n            <span>Specjalista</span>\n          </div>\n          <div className=\"tableComponent_header--specialization\">\n            <span>Specjalizacje</span>\n          </div>\n        </div>\n        {currentTherapistView.map((e, i) => {\n          return (\n            <div key={i} className=\"table\">\n              <div className=\"table_info\">\n                <div className=\"table_info--avatar\">\n                  <img src={e.avatarUrl}  />\n                </div>\n                <div className=\"table_info--name\">{e.fullName}</div>\n              </div>\n              <Tooltip\n                title={e.specializations.map((e, index) => (\n                  <Fragment key={index}>\n                    <span>{e}</span>\n                    {index < 2 ? \", \" : \"\"}\n                  </Fragment>\n                ))}\n                disableHoverListener={e.specializations.length < 4}\n                arrow\n                placement=\"top\"\n              >\n                <div\n                  className=\"table_info--specializations\"\n                  onClick={() => openSideBarRight(e.therapistId)}\n                >\n                  {e.specializations.length !== 0 ? (\n                    getSpecializationsView(e.specializations)\n                  ) : (\n                    <span>Brak danych</span>\n                  )}\n                </div>\n              </Tooltip>\n            </div>\n          );\n        })}\n        <div className=\"table_info--pagination\">\n          <Pagination\n            count={numberOfPage}\n            page={pageIndex + 1}\n            onChange={(_, page) => setPageIndex(page - 1)}\n            variant=\"outlined\"\n            shape=\"rounded\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../../scss/layouts/appOverlay.scss\";\n\nexport default function AppOverlay({ children, closeModals }) {\n  \n  const closeAllModals = (e) => {\n    if (e.target.id === \"overlay\") {\n      return closeModals();\n    }\n  };\n  return (\n    <div className=\"appOverlay\" id=\"overlay\" onClick={(e) => closeAllModals(e)}>\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../../scss/components/customInput/customInput.scss\";\n\nexport const CustomInput = ({ labelText, data, handleInput }) => {\n  return (\n    <div className=\"customInput\">\n      <label>{labelText}</label>\n      <input\n        defaultValue={data}\n        type=\"text\"\n        onChange={(e) => handleInput(e.target.value)}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../../scss/components/customTextArea/customTextArea.scss\";\n\nexport const CustomTextArea = ({ labelText, handleTextArea, data }) => {\n  return (\n    <div>\n      <div className=\"textArea\">\n        <label className=\"textArea_label\">{labelText}</label>\n        <textarea\n          className=\"textArea_area\"\n          onChange={(e) => handleTextArea(e.target.value)}\n          type=\"text\"\n          defaultValue={data}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"../../scss/components/customButton/customButton.scss\";\n\n// the selected role depends on the applied css and thus the button appearance\n// roles to choose from:\n// confirmButton\n// errorButton\n// withBorder\n// withBorderError\n\nexport default function CustomButton({ onClick, role, title }) {\n  return (\n    <button className={`${role}`} onClick={onClick}>\n      {title}\n    </button>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/close_24px.31d9b89a.svg\";","import React, { useState, useEffect } from \"react\";\nimport \"../../scss/components/sideBarRight/sideBarRight.scss\";\nimport { CustomInput } from \"../customInput/CustomInput\";\nimport { CustomTextArea } from \"../customTextArea/CustomTextArea\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  eraseTherapistInfo,\n  fetchSingleTherapistData,\n  saveEditedTherapistInfo,\n} from \"../../actions/mainActions\";\nimport CustomButton from \"../customButton/CustomButton\";\nimport closeButton from \"../../assets/images/close_24px.svg\";\n\nexport default function SideBarRight({\n  setToggleAppOverlay,\n  setToggleMainModal,\n  setToggleSideBarRight,\n  singleTherapistId,\n}) {\n  const singleTherapist = useSelector((state) => state.main.singleTherapist);\n  const dispatch = useDispatch();\n  const [fullName, setFullName] = useState(\"\");\n  const [aboutMe, setAboutMe] = useState(\"\");\n  const [isEdited, setIsEdited] = useState(true);\n\n  useEffect(() => {\n    if (singleTherapist === null) {\n      dispatch(fetchSingleTherapistData(singleTherapistId));\n    }\n    if (singleTherapist !== null) {\n      setFullName(singleTherapist.fullName);\n      setAboutMe(singleTherapist.aboutMe);\n    }\n    return () => {\n      if (singleTherapist !== null) {\n        dispatch(eraseTherapistInfo());\n      }\n    };\n  }, [dispatch, singleTherapist, singleTherapistId]);\n\n  const saveTherapistData = (fullName, aboutMe, singleTherapistId) => {\n    return (\n      setIsEdited((prevState) => !prevState),\n      dispatch(saveEditedTherapistInfo(fullName, aboutMe, singleTherapistId)),\n      alert(\"react.toastify... 'Zapisano Dane' :)\")\n    );\n  };\n  const deleteSingleTherapist = () => {\n    return (\n      setToggleAppOverlay(true),\n      setToggleSideBarRight(false),\n      setToggleMainModal(true)\n    );\n  };\n\n  const handleInput = (name) => setFullName(name);\n  const handleTextArea = (therapistInfo) => setAboutMe(therapistInfo);\n\n  return (\n    <div className=\"sideBarRight\">\n      <button\n        className=\"sideBarRight_closeButton\"\n        onClick={() => setToggleAppOverlay((prevState) => !prevState)}\n      >\n        <img src={closeButton} alt=\"closeButton\"></img>\n      </button>\n      <hr style={{ width: \"100%\", marginTop: \"51px\" }}></hr>\n      <div className=\"sideBarRight_contentWrapper\">\n        {singleTherapist !== null ? (\n          <>\n            {isEdited ? (\n              <>\n                <h5>Informacje o specjaliście</h5>\n                <p>\n                  <label className=\"sideBarRight_contentWrapper--label\">\n                    Imię i nazwisko\n                  </label>\n                  <span className=\"sideBarRight_contentWrapper--info\">\n                    {fullName || \"Brak danych\"}\n                  </span>\n                </p>\n                <p>\n                  <label className=\"sideBarRight_contentWrapper--label\">\n                    Specjalizacje\n                  </label>\n                  <span className=\"sideBarRight_contentWrapper--info\">\n                    {singleTherapist.specializations.length !== 0\n                      ? singleTherapist.specializations.map((e, index) => (\n                          <span\n                            key={index}\n                            className=\"sideBarRight_contentWrapper--info--specializations\"\n                          >{`${e} ${\n                            index < singleTherapist.specializations.length - 1\n                              ? \",\\u00A0\"\n                              : \"\"\n                          }`}</span>\n                        ))\n                      : \"Brak danych\"}\n                  </span>\n                </p>\n                <p>\n                  <label className=\"sideBarRight_contentWrapper--label\">\n                    Rodzaje terapii\n                  </label>\n                  <span className=\"sideBarRight_contentWrapper--info\">\n                    {singleTherapist.therapyTypes.length !== 0\n                      ? singleTherapist.therapyTypes.map((e, index) => (\n                          <span\n                            key={index}\n                            className=\"sideBarRight_info--specializations\"\n                          >{`${e} ${\n                            index < singleTherapist.therapyTypes.length - 1\n                              ? \",\\u00A0\"\n                              : \"\"\n                          }`}</span>\n                        ))\n                      : \"Brak danych\"}\n                  </span>\n                </p>\n                <article>\n                  <label className=\"sideBarRight_contentWrapper--label\">\n                    Rodzaje Certyfikatów\n                  </label>\n                  <span className=\"sideBarRight_contentWrapper--info\">\n                    <ul>\n                      {singleTherapist.certificates.length !== 0\n                        ? singleTherapist.certificates.map((e, index) => (\n                            <li key={index}>{e.name}</li>\n                          ))\n                        : \"Brak danych\"}\n                    </ul>\n                  </span>\n                </article>\n                <p>\n                  <label className=\"sideBarRight_contentWrapper--label\">\n                    O mnie\n                  </label>\n                  <span className=\"sideBarRight_contentWrapper--info\">\n                    {aboutMe || \"Brak danych\"}\n                  </span>\n                </p>\n                <div className=\"sideBarRight_contentWrapper--buttonsContainer\">\n                  <CustomButton\n                    role=\"withBorder\"\n                    title=\"Edytuj\"\n                    onClick={() => setIsEdited((prevState) => !prevState)}\n                  ></CustomButton>\n                  <CustomButton\n                    role=\"withBorderError\"\n                    title=\"Usuń\"\n                    onClick={() => deleteSingleTherapist()}\n                  ></CustomButton>\n                </div>\n              </>\n            ) : (\n              <>\n                <h5>Edytuj informacje o specjaliście</h5>\n                <CustomInput\n                  labelText=\"Imię i nazwisko\"\n                  data={fullName || \"Brak danych\"}\n                  handleInput={handleInput}\n                />\n                <CustomTextArea\n                  labelText=\"O mnie\"\n                  data={aboutMe || \"Brak danych\"}\n                  handleTextArea={handleTextArea}\n                />\n                <div className=\"sideBarRight_buttonsContainer\">\n                  <CustomButton\n                    role=\"confirmButton\"\n                    title=\"Zapisz\"\n                    onClick={() =>\n                      saveTherapistData(fullName, aboutMe, singleTherapistId)\n                    }\n                  ></CustomButton>\n                  <CustomButton\n                    role=\"withBorder\"\n                    title=\"Anuluj\"\n                    onClick={() => setIsEdited((prevState) => !prevState)}\n                  ></CustomButton>\n                </div>\n              </>\n            )}\n          </>\n        ) : (\n          <div className=\"loader\"></div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import config from \"../config.json\";\n\nexport const fetchTherapistsData = () => {\n  return (dispatch) => {\n    fetch(config.allTherapistsData, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ citySeoName: \"ONLINE\" }),\n    })\n      .then((res) => res.json())\n      .then((data) =>\n        dispatch({ type: \"FETCH_ALL_THERAPISTS\", data: data.therapists })\n      )\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n};\nexport const fetchSingleTherapistData = (id) => {\n  return (dispatch) => {\n    fetch(`${config.allTherapistsData}/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => dispatch({ type: \"FETCH_SINGLE_THERAPIST\", data }))\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n};\n\nexport const saveEditedTherapistInfo = (fullName, aboutMe, singleTherapistId) => {\n  let editedData = { fullName, aboutMe, singleTherapistId };\n  return (dispatch) => dispatch({ type: \"SAVE_EDITED_THERAPIST_INFO\", data: editedData });\n};\n\nexport const deleteTherapistData = (id) => {\n  return (dispatch) => dispatch({ type: \"DELETE_THERAPIST_DATA\", data: id });\n};\n\nexport const eraseTherapistInfo = () => {\n  return (dispatch) => dispatch({ type: \"ERASE_THERAPIST_INFO\" });\n};\n","import React from \"react\";\nimport \"../../scss/components/mainModal/mainModal.scss\";\nimport CustomButton from \"../customButton/CustomButton\";\n\nimport { useDispatch } from \"react-redux\";\nimport { deleteTherapistData } from \"../../actions/mainActions\";\n\nexport function MainModal({\n  setToggleMainModal,\n  setToggleSideBarRight,\n  setToggleAppOverlay,\n  singleTherapistId,\n}) {\n  const dispatch = useDispatch();\n\n  const cancelDeleteTherapistData = () => (\n    setToggleMainModal(false), setToggleSideBarRight(true)\n  );\n\n  const deleteTherapist = (singleTherapistId) => (\n    dispatch(deleteTherapistData(singleTherapistId)),\n    setToggleMainModal(false),\n    setToggleAppOverlay(false),\n    alert(\"react.toastify... 'Pomyślnie usunięto użytkownika.' :)\")\n  );\n\n  return (\n    <div className=\"mainModal\">\n      <div className=\"mainModal_content\">\n        <h5>Usunąć ofertę?</h5>\n        <p>\n          Czy na pewno chcesz usunąć tego specjalistę? Tej akcji nie można\n          cofnąć.\n        </p>\n        <div className=\"mainModal_content--buttons\">\n          <CustomButton\n            role=\"withBorder\"\n            title=\"Anuluj\"\n            onClick={() => cancelDeleteTherapistData()}\n          />\n          <CustomButton\n            role=\"errorButton\"\n            title=\"Usuń\"\n            onClick={() => deleteTherapist(singleTherapistId)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport AppLayout from \"./components/layouts/AppLayout\";\nimport TableComponent from \"./components/table/Table\";\nimport AppOverlay from \"./components/layouts/AppOverlay\";\nimport SideBarRight from \"./components/sideBarRight/SideBarRight\";\nimport { MainModal } from \"./components/mainModal/MainModal\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchTherapistsData } from \"./actions/mainActions\";\n\nfunction App() {\n  const [toggleAppOverlay, setToggleAppOverlay] = useState(false);\n  const [toggleSideBarRight, setToggleSideBarRight] = useState(false);\n  const [toggleMainModal, setToggleMainModal] = useState(false);\n  const [singleTherapistId, setSingleTherapistId] = useState(\"\");\n  const allTherapist = useSelector((state) => state.main.allTherapists);\n  const dispatch = useDispatch();\n\n  const closeModals = () => (\n    setToggleAppOverlay(false),\n    setToggleSideBarRight(false),\n    setToggleMainModal(false)\n  )\n\n  useEffect(() => {\n    dispatch(fetchTherapistsData());\n  }, [dispatch]);\n\n  return (\n    <>\n      {toggleAppOverlay === false ? null : (\n        <AppOverlay closeModals={closeModals}>\n          {toggleMainModal === false ? null : (\n            <MainModal\n              setToggleMainModal={setToggleMainModal}\n              setToggleSideBarRight={setToggleSideBarRight}\n              setToggleAppOverlay={setToggleAppOverlay}\n              singleTherapistId={singleTherapistId}\n            />\n          )}\n          {toggleSideBarRight === false ? null : (\n            <SideBarRight\n              setToggleAppOverlay={setToggleAppOverlay}\n              setToggleMainModal={setToggleMainModal}\n              setToggleSideBarRight={setToggleSideBarRight}\n              singleTherapistId={singleTherapistId}\n            ></SideBarRight>\n          )}\n        </AppOverlay>\n      )}\n      <AppLayout>\n        {allTherapist === null ? (\n          <div\n            className=\"loader\"\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          ></div>\n        ) : (\n          <TableComponent\n            setToggleSideBarRight={setToggleSideBarRight}\n            setToggleAppOverlay={setToggleAppOverlay}\n            setSingleTherapistId={setSingleTherapistId}\n          />\n        )}\n      </AppLayout>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initState = {\n  allTherapists: null,\n  singleTherapist: null,\n};\n\nconst mainReducer = (state = initState, action) => {\n  let newState = state;\n  switch (action.type) {\n    case \"FETCH_ALL_THERAPISTS\":\n      newState = {\n        ...state,\n        allTherapists: action.data,\n      };\n      break;\n    case \"FETCH_SINGLE_THERAPIST\":\n      newState = {\n        ...state,\n        singleTherapist: action.data,\n      };\n      break;\n    case \"SAVE_EDITED_THERAPIST_INFO\":\n      let { fullName, aboutMe, singleTherapistId } = action.data;\n      const findTherapistToUpdate = state.allTherapists.findIndex(\n        (e) => e.therapistId === singleTherapistId\n      );\n\n      let newAllTherapists = [...state.allTherapists];\n\n      let updatedTherapistData = state.allTherapists[findTherapistToUpdate];\n      updatedTherapistData.aboutMe = aboutMe;\n      updatedTherapistData.fullName = fullName;\n      newAllTherapists[findTherapistToUpdate] = updatedTherapistData;\n\n      newState = {\n        ...state,\n        newAllTherapists: newAllTherapists,\n      };\n      break;\n    case \"DELETE_THERAPIST_DATA\":\n      const findTherapistDataToRemove = state.allTherapists.findIndex(\n        (e) => e.therapistId === action.data\n      );\n      function deleteDataInArrayWhenFindIndexInAllTherapist() {\n        if (findTherapistDataToRemove !== -1) {\n          let newAllTherapists = [...state.allTherapists];\n          newAllTherapists.splice(findTherapistDataToRemove, 1);\n          return newAllTherapists;\n        } else {\n          return state.newAllTherapists;\n        }\n      }\n      const newAllItemsData = deleteDataInArrayWhenFindIndexInAllTherapist();\n      newState = {\n        ...state,\n        allTherapists: newAllItemsData,\n      };\n      break;\n    case \"ERASE_THERAPIST_INFO\":\n      newState = {\n        ...state,\n        singleTherapist: null,\n      };\n      break;\n    default:\n      return state;\n  }\n  return newState;\n};\n\nexport default mainReducer;\n","import mainReducer from \"./mainReducer\";\n\nimport { combineReducers } from \"redux\";\n\nconst appReducer = combineReducers({\n  main: mainReducer,\n});\n\nexport default appReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport reducer from \"../reducers/appReducer\";\n\nconst loggerMiddleware = createLogger();\n\nconst middlewares = [thunkMiddleware];\n\nmiddlewares.push(loggerMiddleware);\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./helpers/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}